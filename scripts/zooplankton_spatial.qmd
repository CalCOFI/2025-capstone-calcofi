```{r}
library(ggplot2)
library(ggmap)
library(RColorBrewer)
library(tidyverse)
library(sdmTMB)
library(mice)
library(ape)
library(glmnet)
```


```{r}
# original unmerged data
zoop <- read.csv('../data/zoop_data/Zooplankton-new.csv') %>%
  add_utm_columns(ll_names=c('longitude', 'latitude'), utm_names=c('X', 'Y')) %>%
  mutate(lon = round(longitude, 2), lat = round(latitude, 2), year = year(time))
```

```{r}
# bins for x, y coords
xbreaks <- seq(floor(min(zoop$latitude)), ceiling(max(zoop$latitude)), by = 0.75)
ybreaks <- seq(floor(min(zoop$longitude)), ceiling(max(zoop$longitude)), by = 0.75)

# allocate data points into bins
zoop$latbin <- xbreaks[cut(zoop$latitude, breaks = xbreaks, labels=F)]
zoop$longbin <- ybreaks[cut(zoop$longitude, breaks = ybreaks, labels=F)]

# avg total_plankton for each bin
zoop_agg <- aggregate(zoop[, 'total_plankton'], list(zoop$latbin, zoop$longbin), mean) %>%
  rename(latitude = Group.1, longitude = Group.2, total_plankton = x)
```


```{r}
# check for spatial patterns
total_plankton_map <- ggplot(zoop_agg, aes(longitude, latitude)) + 
  geom_point(aes(col = total_plankton), alpha = 0.7, size = 0.7) + 
  scale_color_viridis_c(option = 'viridis', name = 'Total Plankton') +
  coord_fixed() + 
  theme_minimal()

total_plankton_map
```

```{r}
# overlay on map

api_key <- 'AIzaSyAOaUr5AdjGqdE3roRO-zKh51HizzuRC9I'
register_google(key = api_key)

ca_map <- get_map(location = c(lon = -125, lat = 30), maptype = 'satellite', zoom = 3)

ggmap(ca_map) + 
  geom_point(data = zoop_agg,
             aes(x = longitude, y = latitude, color = total_plankton),
             alpha = 0.5, size = 0.6) + 
  # scale_color_viridis_c(option = 'plasma', name = 'Total Plankton') +
  scale_color_gradient2(low = '#1e9600', mid = '#fff200', high = '#ff0000')
```

```{r}
# filter to data in CALCOFI grid

```


```{r}
# merged data
zoop <- read.csv('../data/zoop_data/zooplankton_pH.csv') %>%
  add_utm_columns(ll_names=c('longitude', 'latitude'), utm_names=c('X', 'Y')) %>%
  mutate(lon = round(longitude, 2), lat = round(latitude, 2))
  # months since first observation
  # mutate(time = as.integer(difftime(Date, min(Date), units = 'days') / 30))   
```

```{r}
# Moran's I test for spatial autocorrelation
zoop_dists <- as.matrix(dist(cbind(zoop$longitude, zoop$latitude)))

zoop_dists_inv <- 1 / zoop_dists
zoop_dists_inv[is.infinite(zoop_dists_inv)] <- 0
diag(zoop_dists_inv) <- 0

Moran.I(zoop$total_plankton, zoop_dists_inv)
```
p-value indicates there is not enough evidence to suggest spatial autocorrelation in total plankton counts



Handle missing data in predictors
```{r}
# calculate proportion of NAs per column
# remove columns with high proportion of NA

prop_na <- zoop %>%
  summarise(across(everything(), ~mean(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = 'variable', values_to = 'na_proportion') %>%
  filter(na_proportion < 0.4)

# want balance between variables to choose from and low amount of NAs
# 0.5: 181
# 0.4: 174
# 0.3: 133
# 0.2: 132
# 0.1: 119
# 0.05: 111

# only keep columns with less than 10% missingness
zoop_filtered <- zoop %>%
  select(prop_na$variable)
```

```{r}
zoop_clean <- zoop_filtered %>%
  drop_na()
```

```{r}
zoop_clean
```




```{r}
# Removing all rows with NAs: 732 -> 522 obs
zoop_clean <- zoop_filtered %>%
  drop_na()

# Remove columns that are not suitable predictors
# flag variables, cruise info
# Only keep chemistry variables

variables <- c('Depth', 'CTDTEMP_ITS90', 'Salinity_PSS78', 'DIC', 'TA', 'T_degC', 'O2ml_L', 'STheta', 'O2Sat', 'Oxy__mol_Kg', 'PO4uM', 'SiO3uM', 'NO2uM', 'NO3uM', 'NH3uM', 'TCO2', 'pHout', 'pCO2out', 'fCO2out', 'HCO3out', 'CO3out', 'CO2out', 'BAlkout', 'OHout', 'PAlkout', 'SiAlkout', 'Hfreeout', 'RFout', 'OmegaCAout', 'OmegaARout', 'xCO2out', 'TEMPOUT', 'PRESOUT', 'PO4', 'SI', 'K0output', 'K1output', 'K2output', 'pK1output', 'pK2output', 'KWoutput', 'KBoutput', 'KFoutput', 'KSoutput', 'KP1output', 'KP2output', 'KP3output', 'KSioutput', 'TB', 'TF', 'TS')

coords <- c('Latitude', 'Longitude', 'X', 'Y')

zoop_clean_filtered <- zoop_clean %>%
  select(variables, total_plankton) %>%
  scale() %>%
  as.data.frame() 

zoop_clean_filtered <- cbind(zoop_clean[, coords], zoop_clean_filtered)
```

```{r}
zoop_clean_filtered[, 5:56]
```

```{r}
# perform LASSO
fit_lasso <- glmnet(x = zoop_clean_filtered[, 5:55],
                    y = zoop_clean_filtered$total_plankton,
                    alpha = 1,
                    family = 'gaussian')

fit_lasso
```

```{r}
plot(fit_lasso,label = TRUE)
```



```{r}
plot(fit_lasso, xvar = 'dev')
```


```{r}
# compute R^2
pred <- predict(fit_lasso, newx = as.matrix(zoop_clean_filtered[, 5:55]), s = 0.001)

r2 <- 1 - sum((zoop_clean_filtered$total_plankton - pred)^2) / sum((zoop_clean_filtered$total_plankton - mean(zoop_clean_filtered$total_plankton))^2)

r2
```



```{r}
# get top 5 predictors
get_nparam <- function(mod, numvar) {

  coef(mod, s = with(fit_lasso, min(lambda[df == numvar])))

}

get_nparam(fit_lasso, 5)
```


```{r}
# Fill missing values
covars <- zoop[, c('pHout', 'T_degC', 'DIC', 'Salinity_PSS78')]

# predictive mean matching
imputed_vals <- mice(covars, method = 'pmm', m = 1, maxit = 5)

complete_covars <- complete(imputed_vals)

zoop[, c('pHout', 'T_degC', 'DIC', 'Salinity_PSS78')] <- complete_covars
```







Spatial model
```{r}
mesh <- make_mesh(zoop_clean_filtered, c('X', 'Y'), cutoff=10)
plot(mesh)
```


```{r}
model <- sdmTMB(
  data = zoop_clean_filtered,
  formula = total_plankton ~ NO3uM + NH3uM + SiAlkout + KP1output + KP2output,
  mesh = mesh,
  family = gaussian(link = 'identity'),
  spatial = 'on'
)

model
```

```{r}
tidy(model, conf.int = TRUE)
```

```{r}
zoop_clean_filtered$resids <- residuals(model)
zoop_clean_filtered <- zoop_clean_filtered[is.finite(rowSums(zoop_clean_filtered)),]

qqnorm(zoop_clean_filtered$resids)
qqline(zoop_clean_filtered$resids)
```

Plot Residuals
```{r}
ggplot(zoop_clean_filtered, aes(X, Y, col = resids)) + 
  scale_color_gradient2() + 
  theme_minimal() + 
  geom_point() + 
  coord_fixed()
```

```{r}
# compute R^2
pred_grid <- zoop_clean_filtered[, 3:55]
spatial_pred <- predict(model, newdata = pred_grid)

r2 <- 1 - sum((zoop_clean_filtered$total_plankton - spatial_pred$est)^2) / sum((zoop_clean_filtered$total_plankton - mean(zoop_clean_filtered$total_plankton))^2)

r2
```


```{r}
spatial_pred
```














