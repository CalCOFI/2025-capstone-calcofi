```{r}
library(ggplot2)
library(ggmap)
library(RColorBrewer)
library(tidyverse)
library(sdmTMB)
library(mice)
library(ape)
library(glmnet)
library(splines)
library(mgcv)
library(plotmo)
```


```{r}
# original unmerged data
zoop <- read.csv('../data/zoop_data/Zooplankton-new.csv') %>%
  add_utm_columns(ll_names=c('longitude', 'latitude'), utm_names=c('X', 'Y')) %>%
  mutate(lon = round(longitude, 2), lat = round(latitude, 2), year = year(time))
```

```{r}
# bins for x, y coords
xbreaks <- seq(floor(min(zoop$latitude)), ceiling(max(zoop$latitude)), by = 0.75)
ybreaks <- seq(floor(min(zoop$longitude)), ceiling(max(zoop$longitude)), by = 0.75)

# allocate data points into bins
zoop$latbin <- xbreaks[cut(zoop$latitude, breaks = xbreaks, labels=F)]
zoop$longbin <- ybreaks[cut(zoop$longitude, breaks = ybreaks, labels=F)]

# avg total_plankton for each bin
zoop_agg <- aggregate(zoop[, 'small_plankton'], list(zoop$latbin, zoop$longbin), mean) %>%
  rename(latitude = Group.1, longitude = Group.2, small_plankton = x)
```


```{r}
# check for spatial patterns
small_plankton_map <- ggplot(zoop_agg, aes(longitude, latitude)) + 
  geom_point(aes(col = small_plankton), alpha = 0.7, size = 0.7) + 
  scale_color_viridis_c(option = 'viridis', name = 'Small Plankton') +
  coord_fixed() + 
  theme_minimal()

small_plankton_map
```

```{r}
# overlay on map
api_key <- 'AIzaSyAOaUr5AdjGqdE3roRO-zKh51HizzuRC9I'
register_google(key = api_key)

ca_map <- get_map(location = c(lon = -125, lat = 30), maptype = 'satellite', zoom = 3)

ggmap(ca_map) + 
  geom_point(data = zoop_agg,
             aes(x = longitude, y = latitude, color = small_plankton),
             alpha = 0.5, size = 0.6) + 
  # scale_color_viridis_c(option = 'plasma', name = 'Small Plankton') +
  scale_color_gradient(low = '#fff200', high = '#ff0000') + 
  xlab('Longitude') + 
  ylab('Latitude') +
  ggtitle('Small Plankton Biovolume by Location')
```

```{r}
# filter to data in CALCOFI grid
calcofi_map <- get_map(location = c(-127, 26, -115, 40), maptype = 'satellite')

ggmap(calcofi_map) + 
  geom_point(data = zoop_agg,
             aes(x = longitude, y = latitude, color = small_plankton),
             alpha = 0.5, size = 5) + 
  # scale_color_viridis_c(option = 'plasma', name = 'Small Plankton') +
  scale_color_gradient(low = '#fff200', high = '#ff0000')
```


```{r}
# overlay on map
api_key <- 'AIzaSyAOaUr5AdjGqdE3roRO-zKh51HizzuRC9I'
register_google(key = api_key)

# calcofi_map <- get_map(location = c(-126.1, 28, -115, 38), maptype = 'satellite')
calcofi_map <- get_map(location = c(min(grid$Longitude),
                                    min(grid$Latitude),
                                    max(grid$Longitude),
                                    max(grid$Latitude)), maptype = 'satellite')

ggmap(calcofi_map) +
  geom_tile(data = grid %>% filter(inside), aes(x = Longitude, y = Latitude, fill = fit)) +
  # geom_path(data = coast, aes(x = long, y = lat, group = group), color = "black", size = 0.3) +
  geom_point(data = stations, aes(x = Longitude, y = Latitude), 
             color = "white", size = 1.5, alpha = 0.8) +
  # coord_fixed(xlim = range(grid$Longitude), ylim = range(grid$Latitude)) +
  scale_fill_viridis_c(name = "Predicted\nlog(Abundance)") +
  labs(
    title = "GAM Spatial Effect for Small Plankton",
    x = "Longitude", y = "Latitude"
  ) +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),      # Title
    legend.title = element_text(size = 14, face = "bold"),                 # Legend title
    legend.text = element_text(size = 12) ,
    legend.key.size = unit(2.0, "lines") # Legend labels
  )
```

```{r}
ggmap(calcofi_map) +
  geom_tile(data = grid %>% filter(inside), aes(x = Longitude, y = Latitude, fill = fit)) +
  # geom_path(data = coast, aes(x = long, y = lat, group = group), color = "black", size = 0.3) +
  geom_point(data = stations, aes(x = Longitude, y = Latitude), 
             color = "white", size = 1.5, alpha = 0.8) +
  # coord_fixed(xlim = range(grid$Longitude), ylim = range(grid$Latitude)) +
  scale_fill_viridis_c(name = "Predicted\nlog(Abundance)") +
  labs(
    title = "GAM Spatial Effect for Bryozoan Larvae",
    x = "Longitude", y = "Latitude"
  ) +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),      # Title
    legend.title = element_text(size = 14, face = "bold"),                 # Legend title
    legend.text = element_text(size = 12) ,
    legend.key.size = unit(2.0, "lines") # Legend labels
  )
```



```{r}
# merged data
zoop <- read.csv('../data/zoop_data/zooplankton_pH.csv') %>%
  add_utm_columns(ll_names=c('longitude', 'latitude'), utm_names=c('X', 'Y')) %>%
  mutate(lon = round(longitude, 2), lat = round(latitude, 2)) %>%
  mutate(large_plankton = total_plankton - small_plankton)
```
# Time Series Plots
```{r}
# top 5 stations
zoop %>%
  count(Station_ID) %>%
  arrange(desc(n)) %>%
  head(5)
```

```{r}
zoop %>%
  filter(Station_ID == '090.0 090.0')
```


```{r}
ts_data <- ts(zoop$small_plankton %>% filter(Station_ID == '090.0 090.0'), 
               start = c(year(min(zoop$Date)), month(min(zoop$Date))),
               frequency=12)

plot(ts_data)
```

```{r}
# Load necessary libraries
library(tidyverse)
library(lubridate)

# Load the data
df <- zoop

# Convert the Date column to Date type
df <- df %>% mutate(Date = ymd(Date))

# Identify the top 5 Station_IDs with the most observations
top_stations <- df %>%
  count(Station_ID, sort = TRUE) %>%
  slice_head(n = 5) %>%
  pull(Station_ID)

start_date <- ymd('2011-01-01')
end_date <- ymd('2021-12-31')

# Filter data to include only the top 5 stations
df_top <- df %>%
  filter(Station_ID %in% top_stations) %>%
  filter(Date >= start_date & Date <= end_date)

# Plot the time series
ggplot(df_top, aes(x = Date, y = total_plankton)) +
  geom_line(color = 'steelblue') +
  facet_wrap(~ Station_ID, ncol = 1) + 
  scale_x_date(date_breaks = '1 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 1000, by = 300)) +
  labs(title = "Time Series Plot of Total Plankton Biovolume",
       x = "Date",
       y = "Total Plankton",
       color = "Station ID") +
  theme_minimal() + 
  theme(
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  )

```

```{r}
zoop_data <- read.csv('../data/zoop_data/Zooplankton-new.csv')

zoop_data$Station_ID <- paste(
  sprintf('%05.1f', zoop_data$line),
  sprintf('%05.1f', zoop_data$station),
  sep = ' '
)
zoop_data$Date = as.Date(zoop_data$time)

# Load the data
df <- zoop_data

# Convert the Date column to Date type
df <- df %>% mutate(Date = ymd(Date))

# Identify the top 5 Station_IDs with the most observations
top_stations <- df %>%
  count(Station_ID, sort = TRUE) %>%
  slice_head(n = 5) %>%
  pull(Station_ID)

start_date <- ymd('2011-01-01')
end_date <- ymd('2021-12-31')

# Filter data to include only the top 5 stations
df_top <- df %>%
  filter(Station_ID %in% top_stations) %>%
  filter(Date >= start_date & Date <= end_date)

# Plot the time series
ggplot(df_top, aes(x = Date, y = total_plankton)) +
  geom_line(color = 'steelblue') +
  facet_wrap(~ Station_ID, ncol = 1) + 
  scale_x_date(date_breaks = '1 year', date_labels = '%Y') +
  scale_y_continuous(breaks = seq(0, 1000, by = 300)) +
  labs(title = "Time Series Plot of Total Plankton Biovolume",
       x = "Date",
       y = "Total Plankton",
       color = "Station ID") +
  theme_minimal() + 
  theme(
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  )
```


```{r}
# Moran's I test for spatial autocorrelation
zoop_dists <- as.matrix(dist(cbind(zoop$longitude, zoop$latitude)))

zoop_dists_inv <- 1 / zoop_dists
zoop_dists_inv[is.infinite(zoop_dists_inv)] <- 0
diag(zoop_dists_inv) <- 0
```

```{r}
Moran.I(zoop$small_plankton, zoop_dists_inv)
```

p-value suggests there is spatial autocorrelation in small plankton counts



```{r}
# filter columns
variables <- c('Depth', 'Salinity_PSS78', 'DIC', 'TA', 'T_degC', 'PO4uM', 'SiO3uM', 'NO2uM', 'NO3uM', 'NH3uM', 'pCO2in', 'RFin', 'pHin', 'CO3in', 'OmegaCAin', 'OmegaARin')

coords <- c('Latitude', 'Longitude', 'X', 'Y')

zoop_clean <- zoop %>%
  select(variables, small_plankton, large_plankton, total_plankton) %>%
  scale() %>%
  as.data.frame()

zoop_clean <- cbind(zoop[, coords], zoop_clean) %>%
  drop_na()
```

```{r}
# perform LASSO on total_plankton
fit_lasso_total <- glmnet(x = zoop_clean[, 5:20],
                          y = zoop_clean$total_plankton,
                          alpha = 1,
                          family = 'gaussian')
```


```{r}
# perform LASSO on small plankton
fit_lasso_small <- glmnet(x = zoop_clean[, 5:20],
                          y = zoop_clean$small_plankton,
                          alpha = 1,
                          family = 'gaussian')

fit_lasso_small
```

```{r}
plot_glmnet(fit_lasso_small,
            xvar = 'dev',
            label = TRUE,
            col = 1:4)
```


```{r}
# perform LASSO on large plankton
fit_lasso_large <- glmnet(x = zoop_clean[, 5:20],
                          y = zoop_clean$large_plankton,
                          alpha = 1,
                          family = 'gaussian')
```

```{r}
pred_small <- predict(fit_lasso_small, newx = as.matrix(zoop_clean[, 5:20]), s = 0.001)

r2_small <- 1 - sum((zoop_clean$small_plankton - pred_small)^2) / sum((zoop_clean$small_plankton - mean(zoop_clean$small_plankton))^2)

r2_small
```

```{r}
# get top 5 predictors
get_nparam <- function(mod, numvar) {

  coef(mod, s = with(mod, min(lambda[df == numvar])))

}

get_nparam(fit_lasso_small, 5)
```


Spatial Model
```{r}
mesh <- make_mesh(zoop_clean, c('X', 'Y'), cutoff=10)
plot(mesh)
```

```{r}
fit_spatial <- sdmTMB(
  data = zoop_clean,
  formula = small_plankton ~ T_degC + NO2uM + NH3uM + RFin + pHin,
  mesh = mesh,
  family = gaussian(link = 'identity'),
  spatial = 'on'
)

fit_spatial
```

```{r}
# compute R^2
pred_grid <- zoop_clean[, 3:20]
pred_spatial <- predict(fit_spatial, newdata = pred_grid)

r2_spatial <- 1 - sum((zoop_clean$small_plankton - pred_spatial$est)^2) / sum((zoop_clean$small_plankton - mean(zoop_clean$small_plankton))^2)

r2_spatial
```


```{r}
# GAM with spatial spline
fit_gam <- gam(small_plankton ~ s(Longitude, Latitude, k = 10) + s(T_degC) + s(NO2uM) +
                 s(NH3uM) + s(RFin) + s(pHin), data = zoop_clean)

summary(fit_gam)
```




























Handle missing data in predictors
```{r}
# calculate proportion of NAs per column
# remove columns with high proportion of NA

prop_na <- zoop %>%
  summarise(across(everything(), ~mean(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = 'variable', values_to = 'na_proportion') %>%
  filter(na_proportion < 0.4)

# want balance between variables to choose from and low amount of NAs
# 0.5: 181
# 0.4: 174
# 0.3: 133
# 0.2: 132
# 0.1: 119
# 0.05: 111

# only keep columns with less than 10% missingness
zoop_filtered <- zoop %>%
  select(prop_na$variable)

zoop_clean <- zoop_filtered %>%
  drop_na()
```

```{r}
# Removing all rows with NAs: 732 -> 522 obs
zoop_clean <- zoop_filtered %>%
  drop_na()

# Remove columns that are not suitable predictors
# flag variables, cruise info
# Only keep chemistry variables

variables <- c('Depth', 'CTDTEMP_ITS90', 'Salinity_PSS78', 'DIC', 'TA', 'T_degC', 'O2ml_L', 'STheta', 'O2Sat', 'Oxy__mol_Kg', 'PO4uM', 'SiO3uM', 'NO2uM', 'NO3uM', 'NH3uM', 'TCO2', 'pHout', 'pCO2out', 'fCO2out', 'HCO3out', 'CO3out', 'CO2out', 'BAlkout', 'OHout', 'OmegaCAout', 'OmegaARout', 'PO4')

coords <- c('Latitude', 'Longitude', 'X', 'Y')

zoop_clean_filtered <- zoop_clean %>%
  select(variables, total_plankton) %>%
  scale() %>%
  as.data.frame() 

zoop_clean_filtered <- cbind(zoop_clean[, coords], zoop_clean_filtered)
```

```{r}
zoop_clean_filtered[, 5:56]
```

```{r}
# perform LASSO
fit_lasso <- glmnet(x = zoop_clean_filtered[, 5:55],
                    y = zoop_clean_filtered$total_plankton,
                    alpha = 1,
                    family = 'gaussian')

fit_lasso
```

```{r}
plot(fit_lasso,label = TRUE)
```



```{r}
plot(fit_lasso, xvar = 'dev')
```


```{r}
# compute R^2
pred <- predict(fit_lasso, newx = as.matrix(zoop_clean_filtered[, 5:55]), s = 0.001)

r2 <- 1 - sum((zoop_clean_filtered$total_plankton - pred)^2) / sum((zoop_clean_filtered$total_plankton - mean(zoop_clean_filtered$total_plankton))^2)

r2
```



```{r}
# get top 5 predictors
get_nparam <- function(mod, numvar) {

  coef(mod, s = with(fit_lasso, min(lambda[df == numvar])))

}

get_nparam(fit_lasso, 5)
```


```{r}
# Fill missing values
covars <- zoop[, c('pHout', 'T_degC', 'DIC', 'Salinity_PSS78')]

# predictive mean matching
imputed_vals <- mice(covars, method = 'pmm', m = 1, maxit = 5)

complete_covars <- complete(imputed_vals)

zoop[, c('pHout', 'T_degC', 'DIC', 'Salinity_PSS78')] <- complete_covars
```







Spatial model
```{r}
mesh <- make_mesh(zoop_clean_filtered, c('X', 'Y'), cutoff=10)
plot(mesh)
```


```{r}
model <- sdmTMB(
  data = zoop_clean_filtered,
  formula = total_plankton ~ NO3uM + NH3uM + SiAlkout + KP1output + KP2output,
  mesh = mesh,
  family = gaussian(link = 'identity'),
  spatial = 'on'
)

model
```

```{r}
tidy(model, conf.int = TRUE)
```

```{r}
zoop_clean_filtered$resids <- residuals(model)
zoop_clean_filtered <- zoop_clean_filtered[is.finite(rowSums(zoop_clean_filtered)),]

qqnorm(zoop_clean_filtered$resids)
qqline(zoop_clean_filtered$resids)
```

Plot Residuals
```{r}
ggplot(zoop_clean_filtered, aes(X, Y, col = resids)) + 
  scale_color_gradient2() + 
  theme_minimal() + 
  geom_point() + 
  coord_fixed()
```

```{r}
# compute R^2
pred_grid <- zoop_clean_filtered[, 3:55]
spatial_pred <- predict(model, newdata = pred_grid)

r2 <- 1 - sum((zoop_clean_filtered$total_plankton - spatial_pred$est)^2) / sum((zoop_clean_filtered$total_plankton - mean(zoop_clean_filtered$total_plankton))^2)

r2
```


```{r}
spatial_pred
```














